// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListCafes request
	ListCafes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCafeWithBody request with any body
	CreateCafeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCafe(ctx context.Context, body CreateCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCafe request
	DeleteCafe(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCafe request
	GetCafe(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ReplaceCafeWithBody request with any body
	ReplaceCafeWithBody(ctx context.Context, cafeId PathCafeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ReplaceCafe(ctx context.Context, cafeId PathCafeId, body ReplaceCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListCafes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCafesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCafeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCafeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCafe(ctx context.Context, body CreateCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCafeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCafe(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCafeRequest(c.Server, cafeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCafe(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCafeRequest(c.Server, cafeId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCafeWithBody(ctx context.Context, cafeId PathCafeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCafeRequestWithBody(c.Server, cafeId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ReplaceCafe(ctx context.Context, cafeId PathCafeId, body ReplaceCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReplaceCafeRequest(c.Server, cafeId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListCafesRequest generates requests for ListCafes
func NewListCafesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cafes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCafeRequest calls the generic CreateCafe builder with application/json body
func NewCreateCafeRequest(server string, body CreateCafeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCafeRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateCafeRequestWithBody generates requests for CreateCafe with any type of body
func NewCreateCafeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cafes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCafeRequest generates requests for DeleteCafe
func NewDeleteCafeRequest(server string, cafeId PathCafeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cafeId", runtime.ParamLocationPath, cafeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cafes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCafeRequest generates requests for GetCafe
func NewGetCafeRequest(server string, cafeId PathCafeId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cafeId", runtime.ParamLocationPath, cafeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cafes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewReplaceCafeRequest calls the generic ReplaceCafe builder with application/json body
func NewReplaceCafeRequest(server string, cafeId PathCafeId, body ReplaceCafeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewReplaceCafeRequestWithBody(server, cafeId, "application/json", bodyReader)
}

// NewReplaceCafeRequestWithBody generates requests for ReplaceCafe with any type of body
func NewReplaceCafeRequestWithBody(server string, cafeId PathCafeId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "cafeId", runtime.ParamLocationPath, cafeId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/cafes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListCafesWithResponse request
	ListCafesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCafesResponse, error)

	// CreateCafeWithBodyWithResponse request with any body
	CreateCafeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCafeResponse, error)

	CreateCafeWithResponse(ctx context.Context, body CreateCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCafeResponse, error)

	// DeleteCafeWithResponse request
	DeleteCafeWithResponse(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*DeleteCafeResponse, error)

	// GetCafeWithResponse request
	GetCafeWithResponse(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*GetCafeResponse, error)

	// ReplaceCafeWithBodyWithResponse request with any body
	ReplaceCafeWithBodyWithResponse(ctx context.Context, cafeId PathCafeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCafeResponse, error)

	ReplaceCafeWithResponse(ctx context.Context, cafeId PathCafeId, body ReplaceCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCafeResponse, error)
}

type ListCafesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Cafes *CafeOutputList `json:"cafes,omitempty"`
	}
	JSONDefault *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ListCafesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCafesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CafeOutput
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateCafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteCafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CafeOutput
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetCafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReplaceCafeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CafeOutput
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ReplaceCafeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReplaceCafeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListCafesWithResponse request returning *ListCafesResponse
func (c *ClientWithResponses) ListCafesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListCafesResponse, error) {
	rsp, err := c.ListCafes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCafesResponse(rsp)
}

// CreateCafeWithBodyWithResponse request with arbitrary body returning *CreateCafeResponse
func (c *ClientWithResponses) CreateCafeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCafeResponse, error) {
	rsp, err := c.CreateCafeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCafeResponse(rsp)
}

func (c *ClientWithResponses) CreateCafeWithResponse(ctx context.Context, body CreateCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCafeResponse, error) {
	rsp, err := c.CreateCafe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCafeResponse(rsp)
}

// DeleteCafeWithResponse request returning *DeleteCafeResponse
func (c *ClientWithResponses) DeleteCafeWithResponse(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*DeleteCafeResponse, error) {
	rsp, err := c.DeleteCafe(ctx, cafeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCafeResponse(rsp)
}

// GetCafeWithResponse request returning *GetCafeResponse
func (c *ClientWithResponses) GetCafeWithResponse(ctx context.Context, cafeId PathCafeId, reqEditors ...RequestEditorFn) (*GetCafeResponse, error) {
	rsp, err := c.GetCafe(ctx, cafeId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCafeResponse(rsp)
}

// ReplaceCafeWithBodyWithResponse request with arbitrary body returning *ReplaceCafeResponse
func (c *ClientWithResponses) ReplaceCafeWithBodyWithResponse(ctx context.Context, cafeId PathCafeId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ReplaceCafeResponse, error) {
	rsp, err := c.ReplaceCafeWithBody(ctx, cafeId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCafeResponse(rsp)
}

func (c *ClientWithResponses) ReplaceCafeWithResponse(ctx context.Context, cafeId PathCafeId, body ReplaceCafeJSONRequestBody, reqEditors ...RequestEditorFn) (*ReplaceCafeResponse, error) {
	rsp, err := c.ReplaceCafe(ctx, cafeId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReplaceCafeResponse(rsp)
}

// ParseListCafesResponse parses an HTTP response from a ListCafesWithResponse call
func ParseListCafesResponse(rsp *http.Response) (*ListCafesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCafesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Cafes *CafeOutputList `json:"cafes,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateCafeResponse parses an HTTP response from a CreateCafeWithResponse call
func ParseCreateCafeResponse(rsp *http.Response) (*CreateCafeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CafeOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteCafeResponse parses an HTTP response from a DeleteCafeWithResponse call
func ParseDeleteCafeResponse(rsp *http.Response) (*DeleteCafeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetCafeResponse parses an HTTP response from a GetCafeWithResponse call
func ParseGetCafeResponse(rsp *http.Response) (*GetCafeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CafeOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseReplaceCafeResponse parses an HTTP response from a ReplaceCafeWithResponse call
func ParseReplaceCafeResponse(rsp *http.Response) (*ReplaceCafeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReplaceCafeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CafeOutput
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}
