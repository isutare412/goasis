// Package oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package oapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
)

// CafeInput defines model for CafeInput.
type CafeInput struct {
	Location string `json:"location"`
	Name     string `json:"name"`
}

// CafeOutput defines model for CafeOutput.
type CafeOutput struct {
	CreatedAt time.Time `json:"createdAt"`
	Id        int64     `json:"id"`
	Location  string    `json:"location"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// CafeOutputList defines model for CafeOutputList.
type CafeOutputList = []CafeOutput

// ErrorOutput defines model for ErrorOutput.
type ErrorOutput struct {
	Message *string `json:"message,omitempty"`
}

// PathCafeId defines model for PathCafeId.
type PathCafeId = int64

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse = ErrorOutput

// CreateCafeJSONRequestBody defines body for CreateCafe for application/json ContentType.
type CreateCafeJSONRequestBody = CafeInput

// ReplaceCafeJSONRequestBody defines body for ReplaceCafe for application/json ContentType.
type ReplaceCafeJSONRequestBody = CafeInput

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/v1/cafes)
	ListCafes(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/cafes)
	CreateCafe(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/cafes/{cafeId})
	DeleteCafe(w http.ResponseWriter, r *http.Request, cafeId PathCafeId)

	// (GET /api/v1/cafes/{cafeId})
	GetCafe(w http.ResponseWriter, r *http.Request, cafeId PathCafeId)

	// (PUT /api/v1/cafes/{cafeId})
	ReplaceCafe(w http.ResponseWriter, r *http.Request, cafeId PathCafeId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListCafes operation middleware
func (siw *ServerInterfaceWrapper) ListCafes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListCafes(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateCafe operation middleware
func (siw *ServerInterfaceWrapper) CreateCafe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateCafe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteCafe operation middleware
func (siw *ServerInterfaceWrapper) DeleteCafe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cafeId" -------------
	var cafeId PathCafeId

	err = runtime.BindStyledParameterWithOptions("simple", "cafeId", mux.Vars(r)["cafeId"], &cafeId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cafeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteCafe(w, r, cafeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetCafe operation middleware
func (siw *ServerInterfaceWrapper) GetCafe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cafeId" -------------
	var cafeId PathCafeId

	err = runtime.BindStyledParameterWithOptions("simple", "cafeId", mux.Vars(r)["cafeId"], &cafeId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cafeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCafe(w, r, cafeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ReplaceCafe operation middleware
func (siw *ServerInterfaceWrapper) ReplaceCafe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "cafeId" -------------
	var cafeId PathCafeId

	err = runtime.BindStyledParameterWithOptions("simple", "cafeId", mux.Vars(r)["cafeId"], &cafeId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cafeId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReplaceCafe(w, r, cafeId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/v1/cafes", wrapper.ListCafes).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/cafes", wrapper.CreateCafe).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/v1/cafes/{cafeId}", wrapper.DeleteCafe).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/v1/cafes/{cafeId}", wrapper.GetCafe).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/v1/cafes/{cafeId}", wrapper.ReplaceCafe).Methods("PUT")

	return r
}
