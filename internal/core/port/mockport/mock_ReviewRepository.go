// Code generated by mockery v2.45.0. DO NOT EDIT.

package mockport

import (
	context "context"

	model "github.com/isutare412/goasis/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockReviewRepository is an autogenerated mock type for the ReviewRepository type
type MockReviewRepository struct {
	mock.Mock
}

type MockReviewRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReviewRepository) EXPECT() *MockReviewRepository_Expecter {
	return &MockReviewRepository_Expecter{mock: &_m.Mock}
}

// CreateReview provides a mock function with given fields: _a0, _a1
func (_m *MockReviewRepository) CreateReview(_a0 context.Context, _a1 model.Review) (model.Review, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateReview")
	}

	var r0 model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Review) (model.Review, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Review) model.Review); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Review) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_CreateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateReview'
type MockReviewRepository_CreateReview_Call struct {
	*mock.Call
}

// CreateReview is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Review
func (_e *MockReviewRepository_Expecter) CreateReview(_a0 interface{}, _a1 interface{}) *MockReviewRepository_CreateReview_Call {
	return &MockReviewRepository_CreateReview_Call{Call: _e.mock.On("CreateReview", _a0, _a1)}
}

func (_c *MockReviewRepository_CreateReview_Call) Run(run func(_a0 context.Context, _a1 model.Review)) *MockReviewRepository_CreateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Review))
	})
	return _c
}

func (_c *MockReviewRepository_CreateReview_Call) Return(created model.Review, err error) *MockReviewRepository_CreateReview_Call {
	_c.Call.Return(created, err)
	return _c
}

func (_c *MockReviewRepository_CreateReview_Call) RunAndReturn(run func(context.Context, model.Review) (model.Review, error)) *MockReviewRepository_CreateReview_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteReview provides a mock function with given fields: ctx, id
func (_m *MockReviewRepository) DeleteReview(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReview")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockReviewRepository_DeleteReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteReview'
type MockReviewRepository_DeleteReview_Call struct {
	*mock.Call
}

// DeleteReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockReviewRepository_Expecter) DeleteReview(ctx interface{}, id interface{}) *MockReviewRepository_DeleteReview_Call {
	return &MockReviewRepository_DeleteReview_Call{Call: _e.mock.On("DeleteReview", ctx, id)}
}

func (_c *MockReviewRepository_DeleteReview_Call) Run(run func(ctx context.Context, id int64)) *MockReviewRepository_DeleteReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReviewRepository_DeleteReview_Call) Return(_a0 error) *MockReviewRepository_DeleteReview_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockReviewRepository_DeleteReview_Call) RunAndReturn(run func(context.Context, int64) error) *MockReviewRepository_DeleteReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetReview provides a mock function with given fields: ctx, id
func (_m *MockReviewRepository) GetReview(ctx context.Context, id int64) (model.Review, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReview")
	}

	var r0 model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Review, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Review); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_GetReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReview'
type MockReviewRepository_GetReview_Call struct {
	*mock.Call
}

// GetReview is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockReviewRepository_Expecter) GetReview(ctx interface{}, id interface{}) *MockReviewRepository_GetReview_Call {
	return &MockReviewRepository_GetReview_Call{Call: _e.mock.On("GetReview", ctx, id)}
}

func (_c *MockReviewRepository_GetReview_Call) Run(run func(ctx context.Context, id int64)) *MockReviewRepository_GetReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReviewRepository_GetReview_Call) Return(_a0 model.Review, _a1 error) *MockReviewRepository_GetReview_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReviewRepository_GetReview_Call) RunAndReturn(run func(context.Context, int64) (model.Review, error)) *MockReviewRepository_GetReview_Call {
	_c.Call.Return(run)
	return _c
}

// GetReviewPreload provides a mock function with given fields: ctx, id
func (_m *MockReviewRepository) GetReviewPreload(ctx context.Context, id int64) (model.Review, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetReviewPreload")
	}

	var r0 model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Review, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Review); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_GetReviewPreload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetReviewPreload'
type MockReviewRepository_GetReviewPreload_Call struct {
	*mock.Call
}

// GetReviewPreload is a helper method to define mock.On call
//   - ctx context.Context
//   - id int64
func (_e *MockReviewRepository_Expecter) GetReviewPreload(ctx interface{}, id interface{}) *MockReviewRepository_GetReviewPreload_Call {
	return &MockReviewRepository_GetReviewPreload_Call{Call: _e.mock.On("GetReviewPreload", ctx, id)}
}

func (_c *MockReviewRepository_GetReviewPreload_Call) Run(run func(ctx context.Context, id int64)) *MockReviewRepository_GetReviewPreload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReviewRepository_GetReviewPreload_Call) Return(_a0 model.Review, _a1 error) *MockReviewRepository_GetReviewPreload_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReviewRepository_GetReviewPreload_Call) RunAndReturn(run func(context.Context, int64) (model.Review, error)) *MockReviewRepository_GetReviewPreload_Call {
	_c.Call.Return(run)
	return _c
}

// ListReviewsOfCafe provides a mock function with given fields: ctx, cafeID
func (_m *MockReviewRepository) ListReviewsOfCafe(ctx context.Context, cafeID int64) ([]model.Review, error) {
	ret := _m.Called(ctx, cafeID)

	if len(ret) == 0 {
		panic("no return value specified for ListReviewsOfCafe")
	}

	var r0 []model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Review, error)); ok {
		return rf(ctx, cafeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Review); ok {
		r0 = rf(ctx, cafeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, cafeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_ListReviewsOfCafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReviewsOfCafe'
type MockReviewRepository_ListReviewsOfCafe_Call struct {
	*mock.Call
}

// ListReviewsOfCafe is a helper method to define mock.On call
//   - ctx context.Context
//   - cafeID int64
func (_e *MockReviewRepository_Expecter) ListReviewsOfCafe(ctx interface{}, cafeID interface{}) *MockReviewRepository_ListReviewsOfCafe_Call {
	return &MockReviewRepository_ListReviewsOfCafe_Call{Call: _e.mock.On("ListReviewsOfCafe", ctx, cafeID)}
}

func (_c *MockReviewRepository_ListReviewsOfCafe_Call) Run(run func(ctx context.Context, cafeID int64)) *MockReviewRepository_ListReviewsOfCafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReviewRepository_ListReviewsOfCafe_Call) Return(_a0 []model.Review, _a1 error) *MockReviewRepository_ListReviewsOfCafe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReviewRepository_ListReviewsOfCafe_Call) RunAndReturn(run func(context.Context, int64) ([]model.Review, error)) *MockReviewRepository_ListReviewsOfCafe_Call {
	_c.Call.Return(run)
	return _c
}

// ListReviewsOfUser provides a mock function with given fields: ctx, userID
func (_m *MockReviewRepository) ListReviewsOfUser(ctx context.Context, userID int64) ([]model.Review, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ListReviewsOfUser")
	}

	var r0 []model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]model.Review, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []model.Review); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Review)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_ListReviewsOfUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListReviewsOfUser'
type MockReviewRepository_ListReviewsOfUser_Call struct {
	*mock.Call
}

// ListReviewsOfUser is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *MockReviewRepository_Expecter) ListReviewsOfUser(ctx interface{}, userID interface{}) *MockReviewRepository_ListReviewsOfUser_Call {
	return &MockReviewRepository_ListReviewsOfUser_Call{Call: _e.mock.On("ListReviewsOfUser", ctx, userID)}
}

func (_c *MockReviewRepository_ListReviewsOfUser_Call) Run(run func(ctx context.Context, userID int64)) *MockReviewRepository_ListReviewsOfUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockReviewRepository_ListReviewsOfUser_Call) Return(_a0 []model.Review, _a1 error) *MockReviewRepository_ListReviewsOfUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReviewRepository_ListReviewsOfUser_Call) RunAndReturn(run func(context.Context, int64) ([]model.Review, error)) *MockReviewRepository_ListReviewsOfUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateReview provides a mock function with given fields: _a0, _a1
func (_m *MockReviewRepository) UpdateReview(_a0 context.Context, _a1 model.Review) (model.Review, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReview")
	}

	var r0 model.Review
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Review) (model.Review, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Review) model.Review); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Review)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Review) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReviewRepository_UpdateReview_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateReview'
type MockReviewRepository_UpdateReview_Call struct {
	*mock.Call
}

// UpdateReview is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Review
func (_e *MockReviewRepository_Expecter) UpdateReview(_a0 interface{}, _a1 interface{}) *MockReviewRepository_UpdateReview_Call {
	return &MockReviewRepository_UpdateReview_Call{Call: _e.mock.On("UpdateReview", _a0, _a1)}
}

func (_c *MockReviewRepository_UpdateReview_Call) Run(run func(_a0 context.Context, _a1 model.Review)) *MockReviewRepository_UpdateReview_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Review))
	})
	return _c
}

func (_c *MockReviewRepository_UpdateReview_Call) Return(updated model.Review, err error) *MockReviewRepository_UpdateReview_Call {
	_c.Call.Return(updated, err)
	return _c
}

func (_c *MockReviewRepository_UpdateReview_Call) RunAndReturn(run func(context.Context, model.Review) (model.Review, error)) *MockReviewRepository_UpdateReview_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReviewRepository creates a new instance of MockReviewRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReviewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReviewRepository {
	mock := &MockReviewRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
