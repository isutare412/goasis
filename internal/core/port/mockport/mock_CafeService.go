// Code generated by mockery v2.45.0. DO NOT EDIT.

package mockport

import (
	context "context"

	model "github.com/isutare412/goasis/internal/core/model"
	mock "github.com/stretchr/testify/mock"
)

// MockCafeService is an autogenerated mock type for the CafeService type
type MockCafeService struct {
	mock.Mock
}

type MockCafeService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCafeService) EXPECT() *MockCafeService_Expecter {
	return &MockCafeService_Expecter{mock: &_m.Mock}
}

// CreateCafe provides a mock function with given fields: _a0, _a1
func (_m *MockCafeService) CreateCafe(_a0 context.Context, _a1 model.Cafe) (model.Cafe, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateCafe")
	}

	var r0 model.Cafe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Cafe) (model.Cafe, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Cafe) model.Cafe); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Cafe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Cafe) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCafeService_CreateCafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCafe'
type MockCafeService_CreateCafe_Call struct {
	*mock.Call
}

// CreateCafe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Cafe
func (_e *MockCafeService_Expecter) CreateCafe(_a0 interface{}, _a1 interface{}) *MockCafeService_CreateCafe_Call {
	return &MockCafeService_CreateCafe_Call{Call: _e.mock.On("CreateCafe", _a0, _a1)}
}

func (_c *MockCafeService_CreateCafe_Call) Run(run func(_a0 context.Context, _a1 model.Cafe)) *MockCafeService_CreateCafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Cafe))
	})
	return _c
}

func (_c *MockCafeService_CreateCafe_Call) Return(created model.Cafe, err error) *MockCafeService_CreateCafe_Call {
	_c.Call.Return(created, err)
	return _c
}

func (_c *MockCafeService_CreateCafe_Call) RunAndReturn(run func(context.Context, model.Cafe) (model.Cafe, error)) *MockCafeService_CreateCafe_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCafe provides a mock function with given fields: ctx, cafeID
func (_m *MockCafeService) DeleteCafe(ctx context.Context, cafeID int64) error {
	ret := _m.Called(ctx, cafeID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCafe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, cafeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCafeService_DeleteCafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCafe'
type MockCafeService_DeleteCafe_Call struct {
	*mock.Call
}

// DeleteCafe is a helper method to define mock.On call
//   - ctx context.Context
//   - cafeID int64
func (_e *MockCafeService_Expecter) DeleteCafe(ctx interface{}, cafeID interface{}) *MockCafeService_DeleteCafe_Call {
	return &MockCafeService_DeleteCafe_Call{Call: _e.mock.On("DeleteCafe", ctx, cafeID)}
}

func (_c *MockCafeService_DeleteCafe_Call) Run(run func(ctx context.Context, cafeID int64)) *MockCafeService_DeleteCafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCafeService_DeleteCafe_Call) Return(_a0 error) *MockCafeService_DeleteCafe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCafeService_DeleteCafe_Call) RunAndReturn(run func(context.Context, int64) error) *MockCafeService_DeleteCafe_Call {
	_c.Call.Return(run)
	return _c
}

// GetCafe provides a mock function with given fields: ctx, cafeID
func (_m *MockCafeService) GetCafe(ctx context.Context, cafeID int64) (model.Cafe, error) {
	ret := _m.Called(ctx, cafeID)

	if len(ret) == 0 {
		panic("no return value specified for GetCafe")
	}

	var r0 model.Cafe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (model.Cafe, error)); ok {
		return rf(ctx, cafeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) model.Cafe); ok {
		r0 = rf(ctx, cafeID)
	} else {
		r0 = ret.Get(0).(model.Cafe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, cafeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCafeService_GetCafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCafe'
type MockCafeService_GetCafe_Call struct {
	*mock.Call
}

// GetCafe is a helper method to define mock.On call
//   - ctx context.Context
//   - cafeID int64
func (_e *MockCafeService_Expecter) GetCafe(ctx interface{}, cafeID interface{}) *MockCafeService_GetCafe_Call {
	return &MockCafeService_GetCafe_Call{Call: _e.mock.On("GetCafe", ctx, cafeID)}
}

func (_c *MockCafeService_GetCafe_Call) Run(run func(ctx context.Context, cafeID int64)) *MockCafeService_GetCafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockCafeService_GetCafe_Call) Return(_a0 model.Cafe, _a1 error) *MockCafeService_GetCafe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCafeService_GetCafe_Call) RunAndReturn(run func(context.Context, int64) (model.Cafe, error)) *MockCafeService_GetCafe_Call {
	_c.Call.Return(run)
	return _c
}

// ListCafes provides a mock function with given fields: _a0
func (_m *MockCafeService) ListCafes(_a0 context.Context) ([]model.Cafe, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListCafes")
	}

	var r0 []model.Cafe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.Cafe, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.Cafe); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Cafe)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCafeService_ListCafes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListCafes'
type MockCafeService_ListCafes_Call struct {
	*mock.Call
}

// ListCafes is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockCafeService_Expecter) ListCafes(_a0 interface{}) *MockCafeService_ListCafes_Call {
	return &MockCafeService_ListCafes_Call{Call: _e.mock.On("ListCafes", _a0)}
}

func (_c *MockCafeService_ListCafes_Call) Run(run func(_a0 context.Context)) *MockCafeService_ListCafes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCafeService_ListCafes_Call) Return(_a0 []model.Cafe, _a1 error) *MockCafeService_ListCafes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCafeService_ListCafes_Call) RunAndReturn(run func(context.Context) ([]model.Cafe, error)) *MockCafeService_ListCafes_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCafe provides a mock function with given fields: _a0, _a1
func (_m *MockCafeService) UpdateCafe(_a0 context.Context, _a1 model.Cafe) (model.Cafe, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCafe")
	}

	var r0 model.Cafe
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Cafe) (model.Cafe, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Cafe) model.Cafe); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Cafe)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Cafe) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCafeService_UpdateCafe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCafe'
type MockCafeService_UpdateCafe_Call struct {
	*mock.Call
}

// UpdateCafe is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Cafe
func (_e *MockCafeService_Expecter) UpdateCafe(_a0 interface{}, _a1 interface{}) *MockCafeService_UpdateCafe_Call {
	return &MockCafeService_UpdateCafe_Call{Call: _e.mock.On("UpdateCafe", _a0, _a1)}
}

func (_c *MockCafeService_UpdateCafe_Call) Run(run func(_a0 context.Context, _a1 model.Cafe)) *MockCafeService_UpdateCafe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Cafe))
	})
	return _c
}

func (_c *MockCafeService_UpdateCafe_Call) Return(updated model.Cafe, err error) *MockCafeService_UpdateCafe_Call {
	_c.Call.Return(updated, err)
	return _c
}

func (_c *MockCafeService_UpdateCafe_Call) RunAndReturn(run func(context.Context, model.Cafe) (model.Cafe, error)) *MockCafeService_UpdateCafe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCafeService creates a new instance of MockCafeService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCafeService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCafeService {
	mock := &MockCafeService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
